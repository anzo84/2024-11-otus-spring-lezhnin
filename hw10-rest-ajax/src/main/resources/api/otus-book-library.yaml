openapi: 3.1.0
info:
  title: API для библиотеки
  description: API для управления авторами, жанрами, книгами, комментариями и метриками
  version: 1.0.0
tags:
  - name: Authors
    description: Операции для работы с авторами
  - name: Genres
    description: Операции для работы с жанрами
  - name: Books
    description: Операции для работы с книгами
  - name: Comments
    description: Операции для работы с комментариями
  - name: Metrics
    description: Операции для работы с метриками
servers:
  - url: /api
    description: Otus Book Library API server
paths:
  /authors/{id}:
    get:
      tags:
        - Authors
      summary: Получить автора по ID
      description: Возвращает автора по его идентификатору.
      operationId: getAuthorById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Идентификатор автора
      responses:
        200:
          description: Автор найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Authors
      summary: Обновить автора
      description: Обновляет существующего автора.
      operationId: updateAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Идентификатор автора
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAuthorRequest'
      responses:
        200:
          description: Автор успешно сохранен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Authors
      summary: Удалить автора по ID
      description: Удаляет автора по его идентификатору.
      operationId: deleteAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Идентификатор автора
      responses:
        204:
          description: Автор успешно удален
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /authors:
    get:
      tags:
        - Authors
      summary: Получить всех авторов
      description: Возвращает список всех авторов.
      operationId: getAllAuthors
      responses:
        200:
          description: Список авторов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Authors
      summary: Создать автора
      description: Создает нового автора.
      operationId: createAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: Автор успешно сохранен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /genres/{id}:
    get:
      tags:
        - Genres
      summary: Получить жанр по ID
      description: Возвращает жанр по его идентификатору.
      operationId: getGenreById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Идентификатор жанра
      responses:
        200:
          description: Жанр найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Genres
      summary: Обновить жанр
      description: Обновляет существующий жанр.
      operationId: updateGenre
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Идентификатор жанра
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGenreRequest'
      responses:
        200:
          description: Жанр успешно сохранен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Genres
      summary: Удалить жанр по ID
      description: Удаляет жанр по его идентификатору.
      operationId: deleteGenre
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Идентификатор жанра
      responses:
        204:
          description: Жанр успешно удален
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /genres:
    get:
      tags:
        - Genres
      summary: Получить все жанры
      description: Возвращает список всех жанров.
      operationId: getAllGenres
      responses:
        200:
          description: Список жанров
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Genres
      summary: Создать жанр
      description: Создает новый жанр.
      operationId: createGenre
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
      responses:
        200:
          description: Жанр успешно сохранен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /books/{id}:
    get:
      tags:
        - Books
      summary: Получить книгу по ID
      description: Возвращает книгу по ее идентификатору.
      operationId: getBookById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Идентификатор книги
      responses:
        200:
          description: Книга найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Books
      summary: Обновить книгу
      description: Обновляет существующую книгу.
      operationId: updateBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Идентификатор книги
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequest'
      responses:
        200:
          description: Книга успешно сохранена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Books
      summary: Удалить книгу по ID
      description: Удаляет книгу по ее идентификатору.
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Идентификатор книги
      responses:
        204:
          description: Книга успешно удалена
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /books:
    get:
      tags:
        - Books
      summary: Получить все книги
      description: Возвращает список всех книг.
      operationId: getAllBooks
      responses:
        200:
          description: Список книг
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Books
      summary: Создать книгу
      description: Создает новую книгу.
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        200:
          description: Книга успешно сохранена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /comments/{id}:
    get:
      tags:
        - Comments
      summary: Получить комментарий по ID
      description: Возвращает комментарий по его идентификатору.
      operationId: getCommentById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Идентификатор комментария
      responses:
        200:
          description: Комментарий найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Comments
      summary: Обновить комментарий
      description: Обновляет существующий комментарий.
      operationId: updateComment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Идентификатор комментария
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
      responses:
        200:
          description: Комментарий успешно сохранен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Comments
      summary: Удалить комментарий по ID
      description: Удаляет комментарий по его идентификатору.
      operationId: deleteComment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Идентификатор комментария
      responses:
        204:
          description: Комментарий успешно удален
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /comments:
    get:
      tags:
        - Comments
      summary: Получить все комментарии для книги
      description: Возвращает список комментариев для книги
      operationId: getAllComments
      parameters:
        - name: bookId
          in: query
          description: Идентификатор книги для фильтрации комментариев
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Список комментариев
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Comments
      summary: Создать комментарий
      description: Создает новый комментарий.
      operationId: createComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        200:
          description: Комментарий успешно сохранен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /metrics:
    get:
      tags:
        - Metrics
      summary: Получить метрики
      description: Возвращает список метрик (количество книг, авторов, жанров и комментариев).
      operationId: getMetrics
      responses:
        '200':
          description: Список метрик
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Metric'
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  responses:
    #400
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Error'
    #404
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    #500
    InternalServerError:
      description: Internal Server Error
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Идентификатор автора
          example: 1
        fullName:
          type: string
          description: Полное имя автора
          minLength: 1
          maxLength: 255
          example: Лев Толстой
      required:
        - fullName
    UpdateAuthorRequest:
      type: object
      properties:
        fullName:
          type: string
          description: Полное имя автора
          minLength: 1
          maxLength: 255
          example: Лев Толстой
      required:
        - fullName

    Genre:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Идентификатор жанра
          example: 1
        name:
          type: string
          description: Название жанра
          minLength: 1
          maxLength: 255
          example: Фантастика
      required:
        - name
    UpdateGenreRequest:
      type: object
      properties:
        name:
          type: string
          description: Название жанра
          minLength: 1
          maxLength: 255
          example: Фантастика
      required:
        - name

    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Идентификатор книги
          example: 1
        title:
          type: string
          description: Название книги
          minLength: 1
          maxLength: 255
          example: 1984
        author:
          $ref: '#/components/schemas/Author'
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
          description: Список жанров книги
      required:
        - title
        - author
        - genres
    UpdateBookRequest:
      type: object
      properties:
        title:
          type: string
          description: Название книги
          minLength: 1
          maxLength: 255
          example: 1984
        author:
          $ref: '#/components/schemas/Author'
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
          description: Список жанров книги
      required:
        - title
        - author
        - genres

    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Идентификатор комментария
          example: 1
        content:
          type: string
          description: Содержание комментария
          minLength: 1
          maxLength: 255
          example: Отличная книга!
        book:
          $ref: '#/components/schemas/Book'
      required:
        - content
        - book
    UpdateCommentRequest:
      type: object
      properties:
        content:
          type: string
          description: Содержание комментария
          minLength: 1
          maxLength: 255
          example: Отличная книга!
        book:
          $ref: '#/components/schemas/Book'
      required:
        - content
        - book

    Metric:
      type: object
      properties:
        name:
          type: string
          description: Название метрики
          enum:
            - bookCount
            - authorCount
            - genreCount
            - commentCount
          example: bookCount
        value:
          type: integer
          format: int64
          description: Значение метрики
          example: 42
      required:
        - name
        - value

    Error:
      type: object
      properties:
        message:
          type: string
          example: Описание ошибки